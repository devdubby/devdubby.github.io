{"componentChunkName":"component---src-templates-blog-post-js","path":"/CleanCode/chapter03/","result":{"data":{"site":{"siteMetadata":{"title":"Dubby.log","author":"[Dubby]","siteUrl":"https://devdubby.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fa037fde-1987-50e9-9ab5-96ae538bd92c","excerpt":"회사에서 ‘클린코드’ 책 스터디를 진행하고 있어 공부한 내용을 정리해보려고 한다. 03.함수 어떤 프로그램이든 가장 기본적인 단위가 함수 이번 장은 함수를 잘 만드는 방법에 대해 소개 작게 만들어라 80년대에는 함수가 한 화면을 넘어가면 안된다고 말했다. 요즘은 좋은 모니터를 사용하는 관계로 가로 150자, 세로 100줄을 넘어가면 안된다. if 문/else 문/while 문 등에 들어가는 블록은 한줄을 추천(들여쓰기) 즉, 중첩구조가 생길만큼 함수가 커져서는 안된다. (들여쓰기 수준은…","html":"<p>회사에서 ‘클린코드’ 책 스터디를 진행하고 있어 공부한 내용을 정리해보려고 한다.</p>\n<h2 id=\"03함수\" style=\"position:relative;\"><a href=\"#03%ED%95%A8%EC%88%98\" aria-label=\"03함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03.함수</h2>\n<ul>\n<li>어떤 프로그램이든 가장 기본적인 단위가 함수</li>\n<li>이번 장은 함수를 잘 만드는 방법에 대해 소개</li>\n</ul>\n<h3 id=\"작게-만들어라\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"작게 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작게 만들어라</h3>\n<ul>\n<li>80년대에는 함수가 한 화면을 넘어가면 안된다고 말했다.</li>\n<li>요즘은 좋은 모니터를 사용하는 관계로 가로 150자, 세로 100줄을 넘어가면 안된다.</li>\n<li>if 문/else 문/while 문 등에 들어가는 블록은 한줄을 추천(들여쓰기)</li>\n<li>즉, 중첩구조가 생길만큼 함수가 커져서는 안된다. (들여쓰기 수준은 1단이나 2단을 넘어서면 안됨)</li>\n</ul>\n<h3 id=\"한-가지만-해라\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B0%80%EC%A7%80%EB%A7%8C-%ED%95%B4%EB%9D%BC\" aria-label=\"한 가지만 해라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 가지만 해라</h3>\n<ul>\n<li>함수는 한가지를 해야한다. 그 한가지를 잘 해야 한다. 그 한가지만을 해야 한다.</li>\n<li>함수가 몇가지 이를 하는지 판단하기 위해서 TO 문단으로 기술할 수 있다.<br>\n(TO 문단은 LOGO 언어에서 사용하는 키워드 라고 함. 루비나 파이썬에서 사용하는 ‘def’와 똑같다고 보면 된다고 함)<br>\nex) TO RenderPageWithSetupsAndTeardowns, 페이지가 테스트 페이지인지 확인한 후 테스트 페이지라면 설정 페이지와 해제 페이지를 넣는다. 테스트 페이지든 아니든 페이지를 HTML로 렌더링한다.</li>\n<li>위 예시에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한 가지 작업만 한다는 것.</li>\n<li>함수가 한가지만 하는지 판단하는 추가적인 방법으로, 단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.</li>\n</ul>\n<h3 id=\"함수-당-추상화-수준은-하나로\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EB%8B%B9-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%80-%ED%95%98%EB%82%98%EB%A1%9C\" aria-label=\"함수 당 추상화 수준은 하나로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 당 추상화 수준은 하나로</h3>\n<ul>\n<li>함수가 확실히 ‘한 가지’ 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다.</li>\n<li>추상화 수준은 높음, 중간, 낮음으로 평가할 수 있다.</li>\n<li>한 함수 내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. (추상화 수준이 높음이면 높음을 유지, 낮음이면 낮음을 유지해야 한다.)</li>\n<li>코드를 위에서 아래로 읽으면 함수 추상화 수준이 한번에 한 단계씩 낮아지는데, 이를 내려가기 규칙이라고 부른다.</li>\n<li>추상화 수준이 하나인 함수를 구현하기란 쉽지 않기 때문에, 중요한 핵심은 짧으면서도 ‘한 가지’ 만 하는 함수다.</li>\n</ul>\n<h3 id=\"switch-문\" style=\"position:relative;\"><a href=\"#switch-%EB%AC%B8\" aria-label=\"switch 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Switch 문</h3>\n<ul>\n<li>switch 문은 작게 만들기 어려운것이 사실</li>\n<li>switch 문은 본질적으로 n가지를 처리하는 문법이기 때문에 한 가지 작업만 하는 switch 문을 만들기는 어렵다.</li>\n<li>\n<p>switch 문을 저차원 클래스에 숨기고 절대로 반복하지 않는 방법은 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">calculatePay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token keyword\">case</span> COMMISSIONED<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">calculateCommissionedPay</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">case</span> HOURLY<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">calculateHourlyPay</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">case</span> SALARIED<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">calculateSalariedPay</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>위 함수는 몇가지 문제가 있다. 함수가 길고, 새 직원 유형을 추가하면 더 길어진다.</li>\n<li>‘한 가지’ 작업만 수행하지 않고, SRP(단일 책임 원칙) 을 위반한다. 단일 책임 원칙이란 어떤 클래스나 모듈이 단 하나의\b 변경하려는 이유만을 가져야 하는데 위 코드는 변경할 이유가 여럿이기 때문에 SRP를 위반한다.</li>\n<li>OCP(개방-패쇄 원칙) 도 위반하는데, OCP는 소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다’는 프로그래밍 원칙이다. 위 코드는 새 직원 유형을 추가할 때마다 코드를 변경하기 때문에 OCP를 위반한다.</li>\n<li>위 코드는 switch 문을 추상 팩토리 안에 꽁꽁 숨겨서 해결 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPayday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">calculatePay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deliverPay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> pay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeFactory</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">makeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeRecord</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeFactoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EmployeeFactory</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">makeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeRecord</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> COMMISSIONED<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommissionedEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> HOURLY<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HourlyEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> SALARIED<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SalariedEmploye</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>추상 팩토리란?<br>\n서로 관련이 있는 객체들을 통째로 묶어서 팩토리 클래스로 만들고, 이들 팩토리를 조건에 따라 생성하도록 다시 팩토리를 만들어서 객체를 생성하는 패턴<br>\n즉, 관련성 있는 여러 종류의 객체를 일관된 방식으로 생성하는 경우에 유용하다.<br>\n추상 팩토리는 싱글톤 패턴, 팩토리 매서드 패턴을 사용함<br>\nex) 삼성 컴퓨터 객체 공장, LG 컴퓨터 객체 공장</p>\n</blockquote>\n<h3 id=\"서술적인-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"서술적인 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서술적인 이름을 사용하라</h3>\n<ul>\n<li>testableHtml 보다 SetupTeardownIncluder.render 와 같이 하는 일을 좀 더 잘 표현하도록 이름을 짓는것이 좋다.</li>\n<li>함수가 작고 단순할수록 서술적인 이름을 고르기도 쉬워진다.</li>\n<li>이름이 길어도 괜찮음. 길고 서술적인 이름이 짧고 어려운 이름보다 좋다. 주석보다 좋다.</li>\n<li>IDE를 사용해 이름 바꾸기도 좋다.</li>\n<li>서술적인 이름을 사용하면 개발자 머릿속에서도 설계가 뚜렷해지므로 코드를 개선하기도 쉬워진다.</li>\n<li>모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다.<br>\nex) includeSetupAndTeardownPages, includeSetupPages, includeSuiteSetupPage, includeSetupPage 등 문체가 비슷하면 이야기를 순차적으로 풀어가기도 쉬움.</li>\n</ul>\n<h3 id=\"함수-인수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%9D%B8%EC%88%98\" aria-label=\"함수 인수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 인수</h3>\n<ul>\n<li>함수에서 이상적인 인수 개수는 0개(무항), 그 다음으로 1개(단항), 2개(이항) 순이고, 3개(삼항) 이상부터는 가능한 피하는 편이 좋다.</li>\n<li>includeSetupPageInfo(new PageContent) 보다 includeSetupPage() 가 더 이해하기 쉽다.</li>\n<li>테스트 코드를 작성하는 관점에서도 인수가 없는 함수에 대해 테스트 케이스를 작성하는 것이 더 쉽다.</li>\n</ul>\n<h4 id=\"많이-쓰는-단항-형식\" style=\"position:relative;\"><a href=\"#%EB%A7%8E%EC%9D%B4-%EC%93%B0%EB%8A%94-%EB%8B%A8%ED%95%AD-%ED%98%95%EC%8B%9D\" aria-label=\"많이 쓰는 단항 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>많이 쓰는 단항 형식</h4>\n<ul>\n<li>함수에 인수 1개를 넘기는 이유로 가장 흔한 두 가지 경우가 있다.</li>\n<li>boolean fileExists(“MyFile”) 이 좋은 예</li>\n<li>InputStream fileOpen(“MyFile”) 은 String 형의 파일 이름을 InputStream 으로 변환하는 좋은 예</li>\n<li>passwordAttemptFailedNtimes(int attempts) 와 같은 이벤트 함수는 유용한 단항 함수 형식 이벤트</li>\n<li>위 경우를 제외하고는 단항 함수는 가급적 피하는 것이 좋다.</li>\n<li>void includeSetupPageInto(StringBuffer pageText)와 같이 변환 함수에서 출력 인수를 사용하면 혼란을 일으킴</li>\n</ul>\n<h4 id=\"플래그-인수\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9E%98%EA%B7%B8-%EC%9D%B8%EC%88%98\" aria-label=\"플래그 인수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플래그 인수</h4>\n<ul>\n<li>함수에 부울 값을 인수로 넘기는 것은 정말로 끔찍</li>\n<li>플래그가 참이면 이걸 하고 거짓이면 저걸 한다는, 즉 함수가 여러 가지를 한꺼번에 처리한다고 대놓고 공표하는셈</li>\n</ul>\n<h4 id=\"이항-함수\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%95%AD-%ED%95%A8%EC%88%98\" aria-label=\"이항 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이항 함수</h4>\n<ul>\n<li>인수가 2개인 함수는 인수가 1개인 함수보다 이해하기 어렵다.</li>\n<li>wirteField(name) 이 writeField(outputStream, name) 보다 이해하기 쉬운 법</li>\n<li>물론 이항 함수가 적절한 경우도 있는데, Point p = new Point(0, 0)가 좋은 예다. 인수 2개가 한 값을 표현하는 요소이다.</li>\n<li>이항 함수가 무조건 나쁘다는 소리는 아니지만, 그만큼 위험이 따른다는 사실을 인지하고 최대한 단항 함수로 바꾸도록 애써야 한다.</li>\n</ul>\n<h4 id=\"삼항-함수\" style=\"position:relative;\"><a href=\"#%EC%82%BC%ED%95%AD-%ED%95%A8%EC%88%98\" aria-label=\"삼항 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삼항 함수</h4>\n<ul>\n<li>당연하지만, 인수가 3개인 함수가 인수가 2개인 함수보다 훨씬 더 이해하기 어렵다.</li>\n<li><code class=\"language-text\">assertEquals(message, expected, actual)</code> 는 첫 인수가 expected 라고 예상되어 주춤하게 되지만, <code class=\"language-text\">assertEquals(1.0, amount, .001)</code> 은 부동소수점 비교가 상대적이라는 사실을 인지할 수 있어 그리 음험하지 않은 삼항함수</li>\n</ul>\n<h4 id=\"인수-객체\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%88%98-%EA%B0%9D%EC%B2%B4\" aria-label=\"인수 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인수 객체</h4>\n<ul>\n<li>인수가 2~3개 필요하다면 일부를 독자적인 클래스 변수로 선언할 생각을 해보자.</li>\n<li><code class=\"language-text\">Circle makecircle(double x, double y, double radius)</code> 와 <code class=\"language-text\">Circle makeCircle(Point center, double radius)</code> 와 같이 x, y를 묶어 넘기려면 결국 이름을 붙여야 하므로 개념을 표현해줄 수 있다.</li>\n</ul>\n<h4 id=\"인수-목록\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%88%98-%EB%AA%A9%EB%A1%9D\" aria-label=\"인수 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인수 목록</h4>\n<ul>\n<li>때로는 인수 개수가 가변적인 함수도 필요하다. <code class=\"language-text\">String.format</code>메서드가 좋은 예시</li>\n<li>`String.format(“%s worked %.2f hours.”, name, hours) 와 같이 사용하지만, 가변 인수 전부를 List 형 인수 하나로 취급할 수 있다.</li>\n<li>실제로 <code class=\"language-text\">String.format</code> 선언부를 살펴보면 <code class=\"language-text\">public String format(String format, object... args)</code> 로 되어 있다.</li>\n</ul>\n<h4 id=\"동사와-키워드\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%82%AC%EC%99%80-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"동사와 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동사와 키워드</h4>\n<ul>\n<li>인수의 순서를 제대로 표현하려 할때도 좋은 함수 이름은 필수</li>\n<li>함수와 인수가 동사/명사 쌍을 이루면 곧바로 이해하기 쉬움 <code class=\"language-text\">ex)write(name)</code></li>\n<li><code class=\"language-text\">writeField(name)</code> 처럼 사용하면 이름(name)이 필드(field) 라는 사실이 분명히 드러날 수 있다.</li>\n<li><code class=\"language-text\">assertEquals</code> 보다 <code class=\"language-text\">assertExpectedEqualsActual(expected, actual)</code> 처럼 표현하면 인수 순서를 기억할 필요가 없다.</li>\n</ul>\n<h3 id=\"부수-효과를-일으키지-마라\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9D%BC%EC%9C%BC%ED%82%A4%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"부수 효과를 일으키지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부수 효과를 일으키지 마라</h3>\n<ul>\n<li>\n<p>부수 효과는 즉 거짓말, 함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓도 하는것.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserValidator</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Cryptographer</span> cryptographer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">UserGateway</span><span class=\"token punctuation\">.</span><span class=\"token function\">findByname</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">!=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>NULL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> codedPhrase <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPhraseEncodedByPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> phrase <span class=\"token operator\">=</span> cryptographer<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>codedPhrase<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Valid Password\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Session</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>위 예제에서 Session.initialize() 호출이 부수 효과를 일으킨다.</li>\n<li>함수 이름만 보면 checkPassword 함수로 세션을 초기화 한다는 사실은 드러나지 않는다. (함수 이름만 보고 호출하는 사용자는 사용자를 인증하면서 기존 세션 정보를 지워버릴 위험에 처함)</li>\n<li>checkPasswordAndInitializeSession 이라는 이름을 추천</li>\n</ul>\n<h4 id=\"출력-인수\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5-%EC%9D%B8%EC%88%98\" aria-label=\"출력 인수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력 인수</h4>\n<ul>\n<li><code class=\"language-text\">appendFooter(s)</code> 는 무언가에 s를 바닥글로 첨부할까? 아니면 s에 바닥글을 첨부할까? 이는 함수의 선언부를 찾아봐야 분명해진다.<br>\n<code class=\"language-text\">public void appendFooter(StringBuffer report)</code></li>\n<li>함수 선언부를 찾아보는 행위는 코드를 보다가 주춤하는 행위와 동급</li>\n<li>인수 s가 출력 인수라는 사실은 분명하지만 함수 선언부를 찾아보고 나서야 알 수 있음</li>\n<li>객체 지향 프로그래밍이 나오기 전에는 출력 인수가 불가피한 경우도 있었지만, 객체 지향 언어에서는 출력 인수를 사용할 필요가 거의 없다.</li>\n<li>출력 인수로 사용하라고 설계한 변수가 바로 this 위 코드는 <code class=\"language-text\">report.appendFooter()</code> 와 같이 호출하는 방식이 좋다.</li>\n</ul>\n<h3 id=\"명령과-조회를-분리하라\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EA%B3%BC-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"명령과 조회를 분리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령과 조회를 분리하라</h3>\n<ul>\n<li>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다.</li>\n<li><code class=\"language-text\">public boolean set(String attribute, String value)</code> 이 함수는 attribute 인 속성을 찾아 값을 value로 설정한 후 성공하면 true를 반환하고 실패하면 false를 반환하는 함수이다.<br>\n그래서 <code class=\"language-text\">if (set(\"username\", \"unclebob\")) ...</code> 와 같이 괴상한 코드가 나온다.<br>\n“username”이 “unclebob”으로 설정되어 있는지 확인하는 코드인가? 아니면 “username”을 “unclebob”으로 설정하는 코드인가?</li>\n<li>위 예시를 구현한 개발자는 “set”을 동사로 의도했지만 if문에 넣고 나니 형용사로 느껴진다.</li>\n<li>\n<p>해결책은 명령과 조회를 분리해 혼란을 애초에 뿌리뽑는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unclebob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"오류-코드보다-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"오류 코드보다 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 코드보다 예외를 사용하라</h3>\n<ul>\n<li>명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.</li>\n<li>자칫하면 if 문에서 명령을 표현식으로 사용하기 쉬운 탓</li>\n<li><code class=\"language-text\">if (deletePage(page) == E_OK)</code> 이 코드는 동사/형용사 혼란을 일으키지 않는 대신 여러 단계로 중첩되는 코드를 야기시킴</li>\n<li>\n<p>오류 코드를 반환하면 호출자는 오류 코드를 곧바로 처리해야 한다는 문제에 부딪힘</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">deletePage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> E_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">deleteReference</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> E_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>configKeys<span class=\"token punctuation\">.</span><span class=\"token function\">deleteKey</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">makeKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> E_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page deleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"configKey not deleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deleteReference from registry failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> E_ERROR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>보다는</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">deletePage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nregistry<span class=\"token punctuation\">.</span><span class=\"token function\">deleteReference</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfigKeys<span class=\"token punctuation\">.</span><span class=\"token function\">deleteKey</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">makeKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>로 작성시 더 깔끔해진다.</p>\n</li>\n</ul>\n<h4 id=\"trycatch-블록-뽑아내기\" style=\"position:relative;\"><a href=\"#trycatch-%EB%B8%94%EB%A1%9D-%EB%BD%91%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"trycatch 블록 뽑아내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Try/Catch 블록 뽑아내기</h4>\n<ul>\n<li>\n<p>try/catch 블록은 원래 추하기 때문에 별도 함수로 뽑아내는 편이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Page</span> page<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">deletePageAndAllReferences</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">logError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>private void deletePageAndAllReferences(Page page) throws Exception {\ndeletePage(page);\nregistry.deleteReference(page.name);\nconfigKeys.deleteKey(page.name.makeKey());\n}</p>\n<p>private void logError(Exception e) {\nlogger.log(e.getMessage());\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 정상 동작과 어류 처리 동작을 위처럼 분리하면 코드를 이해하고 수정하기 더 쉬워진다.\n\n#### 오류 처리도 한 가지 작업이다.\n- 앞에서 말했듯이 함수는 '한 가지' 작업만 해야 하는데 오류 처리도 한 가지 작업에 속한다. 그러므로 오류 처리 하는 함수는 오류만을 처리해야 마땅하다.\n\n#### Error.java 의존성 자석\n- 오류 코드를 반환한다는 이야기는, 클래스든 열거형 변수든, 어디선가 오류 코드를 정의 한다는 뜻(ex. constants_pb의 Error)\n```java\npublic enum Error { \n\tOK,\n\tINVALID,\n\tNO_SUCH,\n\tLOCKED,\n\tOUT_OF_RESOURCES, \t\n\tWAITING_FOR_EVENT;\n}</code></pre></div>\n<ul>\n<li>재컴파일/재배치가 번거롭기 때문에 Error enum을 새로 만드는 대신에 기존 오류 코드를 재사용하는 것이 좋다.</li>\n</ul>\n<h3 id=\"반복하지-마라\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"반복하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복하지 마라</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testableHtml</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageData</span> pageData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> includeSuiteSetup<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WikiPage</span> wikiPage <span class=\"token operator\">=</span> pageData<span class=\"token punctuation\">.</span><span class=\"token function\">getWikiPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageData<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>includeSuiteSetup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">WikiPage</span> suiteSetup <span class=\"token operator\">=</span>\n                    <span class=\"token class-name\">PageCrawlerImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInheritedPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SuiteResponder</span><span class=\"token punctuation\">.</span>SUITE_SETUP_NAME<span class=\"token punctuation\">,</span> wikiPage\n                                                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suiteSetup <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">WikiPagePath</span> pagePath <span class=\"token operator\">=</span> suiteSetup<span class=\"token punctuation\">.</span><span class=\"token function\">getPageCrawler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullPath</span><span class=\"token punctuation\">(</span>suiteSetup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">String</span> pagePathName <span class=\"token operator\">=</span> <span class=\"token class-name\">PathParser</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>pagePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!include -setup .\"</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pagePathName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">WikiPage</span> setup <span class=\"token operator\">=</span> <span class=\"token class-name\">PageCrawlerImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInheritedPage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SetUp\"</span><span class=\"token punctuation\">,</span> wikiPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setup <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">WikiPagePath</span> setupPath <span class=\"token operator\">=</span>\n                    wikiPage<span class=\"token punctuation\">.</span><span class=\"token function\">getPageCrawler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullPath</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> setupPathName <span class=\"token operator\">=</span> <span class=\"token class-name\">PathParser</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>setupPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!include -setup .\"</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>setupPathName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pageData<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageData<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">WikiPage</span> teardown <span class=\"token operator\">=</span> <span class=\"token class-name\">PageCrawlerImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInheritedPage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TearDown\"</span><span class=\"token punctuation\">,</span> wikiPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>teardown <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">WikiPagePath</span> tearDownPath <span class=\"token operator\">=</span>\n                    wikiPage<span class=\"token punctuation\">.</span><span class=\"token function\">getPageCrawler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullPath</span><span class=\"token punctuation\">(</span>teardown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> tearDownPathName <span class=\"token operator\">=</span> <span class=\"token class-name\">PathParser</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>tearDownPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!include -teardown .\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>tearDownPathName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>includeSuiteSetup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">WikiPage</span> suiteTeardown <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">PageCrawlerImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInheritedPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SuiteResponder</span><span class=\"token punctuation\">.</span>SUITE_TEARDOWN_NAME<span class=\"token punctuation\">,</span> wikiPage\n                                                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suiteTeardown <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">WikiPagePath</span> pagePath <span class=\"token operator\">=</span> suiteTeardown<span class=\"token punctuation\">.</span><span class=\"token function\">getPageCrawler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullPath</span><span class=\"token punctuation\">(</span>suiteTeardown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> pagePathName <span class=\"token operator\">=</span> <span class=\"token class-name\">PathParser</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>pagePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!include -teardown .\"</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pagePathName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    pageData<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> pageData<span class=\"token punctuation\">.</span><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>앞에 3-1 예제 코드에서 <code class=\"language-text\">SetUp, SuiteSetUp, TearDown, SuiteTearDown</code> 이 반복된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SetupTeardownIncluder</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">PageData</span> pageData<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isSuite<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">WikiPage</span> testPage<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">StringBuffer</span>\tnewPageContent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">PageCrawler</span> pageCrawler<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageData</span> pageData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>pageData<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageData</span> pageData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isSuite<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SetupTeardownIncluder</span><span class=\"token punctuation\">(</span>pageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>isSuite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SetupTeardownIncluder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageData</span> pageData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageData <span class=\"token operator\">=</span> pageData<span class=\"token punctuation\">;</span>\n\ttestPage <span class=\"token operator\">=</span> pageData<span class=\"token punctuation\">.</span><span class=\"token function\">getWikiPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpageCrawler <span class=\"token operator\">=</span> testPage<span class=\"token punctuation\">.</span><span class=\"token function\">getPageCrawler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnewPageContent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isSuite<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSuite <span class=\"token operator\">=</span> isSuite<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTestPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">includeSetupAndTeardownPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> pageData<span class=\"token punctuation\">.</span><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isTestPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pageData<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includeSetupAndTeardownPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">includeSetupPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">includePageContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">includeTeardownPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">updatePageContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includeSuiteSetupPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SuiteResponder</span><span class=\"token punctuation\">.</span>SUITE_SETUP_NAME<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-setup\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includeSetupPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Setup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-setup\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includePageContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\tnewPageContent<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pageData<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includeTeardownPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Excepton</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">includeTeardownPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isSuite<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">includeSuiteTeardownPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includeTeardownPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TearDown\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-teardown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">includeSuiteTeardownPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SuiteResponder</span><span class=\"token punctuation\">.</span>SUITE_TEARDOWN_NAME<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-teardown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updatePageContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\tpageData<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>newPageContent<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pageName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">WikiPage</span> inheritedPage <span class=\"token operator\">=</span> <span class=\"token function\">findInheritedPage</span><span class=\"token punctuation\">(</span>pageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> inheritedPage <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> pagePathName <span class=\"token operator\">=</span> <span class=\"token function\">getPathNameForPage</span><span class=\"token punctuation\">(</span>inheritedPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">buildIncludeDirective</span><span class=\"token punctuation\">(</span>pagePathName<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">WikiPage</span> <span class=\"token function\">findInheritedPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pageName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">PageCrawlerImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInheritedPage</span><span class=\"token punctuation\">(</span>pageName<span class=\"token punctuation\">,</span> testPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPathNameForPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WikiPage</span> page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">WikiPagePath</span> pagePath <span class=\"token operator\">=</span> pageCrawler<span class=\"token punctuation\">.</span><span class=\"token function\">getFullPath</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">PathParser</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>pagePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildIncludeDirective</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pagePathName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnewPageContent\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n!include \"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" .\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pagePathName<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 3-7 코드에서 include 방법으로 중복을 없앤다.\n- 코드를 중복하면 코드 길이가 늘어날 뿐 아니라 알고리즘/로직이 변하면 중복 되어 있는곳 모두 손을 봐야 한다. 게다가 어느 한곳이라도 빠뜨리면 오류가 발생할 확률도 높아진다.\n- 객체 지향 프로그래밍에서는 코드를 부모 클래스로 몰아 중복을 없앤다.\n\n### 구조적 프로그래밍\n- 모든 함수와 함수 내 모든 블록에 입구와 출구가 하나만 존재해야 한다고 한다. 즉, return문이 하나여야 한다.\n- 루프 안에서 break, continue를 사용해선 안되며 goto는 절대로 절대로 안된다.\n- 함수가 작다면 간혹 return, break, continue를 여러 차례 사용해도 괜찮다. 오히려 때로는 단일 입/출구 규칙보다 의도를 표현하기 쉬워진다.\n\n### 함수를 어떻게 짜죠?\n- 소프트웨어를 짜는 행위는 여느 글짓기와 비슷하다. 논문이나 기사를 작성할 때 서투르고 중구난방의 어수선한 초안을 작성한다.\n- 함수를 짤 대도 마찬가지. 처음에는 길고 복잡하고 들여쓰기 단계도 많고 중복된 루프도 많다. 인수 목록도 아주 길다. 이름은 즉흥적이도 코드는 중복된다. 하지만 그 서투른 코드를 빠짐없이 테스트 하는 단위 테스트 케이스도 만든다.\n- 그런 후 코드를 다듬고, 함수를 만들고, 이름을 바꾸고, 중복을 제거한다. 메서드를 줄이고 순서를 바꾼다. 이 와중에도 단위 테스트는 항상 통과한다. (테스트 코드의 중요성...ㅠㅠ)\n- 그래서 최정적으로 이 장에서 설명한 규칙을 따르는 함수가 얻어진다.\n\n### 결론\n- 함수는 그 언어에서 동사이며, 클래스는 명사이다. 프로그래밍의 기술은 언제나 언어 설계의 기술이다.\n- 프로그래밍을 잘하는 프로그래머들은 시스템을 구현할 프로그램이 아니라 풀어갈 이야기로 여긴다.\n- 프로그래밍 언어라는 수단을 사용해 좀 더 풍부하고 좀 더 표현력이 강한 언어를 만들어 이야기를 풀어가는 것\n- 여기서 시스템에서 발생하는 모든 동작을 설명하는 함수 계층이 바로 그 언어에 속한다.\n- 작성하는 함수가 분명하고 정확한 언어로 깔끔하게 같이 맞아떨어져야 이야기를 풀어가기가 쉬워진다는 사실을 기억하기 바란다.</code></pre></div>","frontmatter":{"title":"Clean Code Study (Ch.3 Function)","date":"July 19, 2021"}}},"pageContext":{"slug":"/CleanCode/chapter03/","previous":{"fields":{"slug":"/development/dubby-log-시작⭐️/"},"frontmatter":{"title":"Dubby log 시작⭐️"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}